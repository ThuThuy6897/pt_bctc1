import streamlit as st
import pandas as pd
import numpy as np
import json
import time
from google import genai
from google.genai.errors import APIError
from typing import Dict, Any

# --- C·∫•u h√¨nh Trang Streamlit ---
st.set_page_config(
    page_title="Ph√¢n T√≠ch Hi·ªáu Qu·∫£ D·ª± √Ån ƒê·∫ßu T∆∞ (NPV/IRR)",
    layout="wide"
)

st.title("·ª®ng d·ª•ng Ph√¢n T√≠ch Hi·ªáu Qu·∫£ D·ª± √Ån ƒê·∫ßu T∆∞ üìä")
st.markdown("S·ª≠ d·ª•ng Gemini AI ƒë·ªÉ tr√≠ch xu·∫•t d·ªØ li·ªáu t√†i ch√≠nh t·ª´ vƒÉn b·∫£n, t√≠nh to√°n c√°c ch·ªâ s·ªë quan tr·ªçng (NPV, IRR, PP, DPP) v√† ph√¢n t√≠ch chuy√™n s√¢u.")
st.divider()

# --- ƒê·ªãnh nghƒ©a Schema JSON cho vi·ªác Tr√≠ch xu·∫•t d·ªØ li·ªáu (Task 1) ---
# S·ª≠ d·ª•ng Integer/Number thay v√¨ String ƒë·ªÉ ƒë·∫£m b·∫£o t√≠nh to√°n ch√≠nh x√°c
FINANCIAL_SCHEMA = {
    "type": "OBJECT",
    "properties": {
        "initial_investment": {"type": "NUMBER", "description": "T·ªïng v·ªën ƒë·∫ßu t∆∞ ban ƒë·∫ßu (t·ª∑ VNƒê ho·∫∑c VNƒê)."},
        "project_life": {"type": "INTEGER", "description": "V√≤ng ƒë·ªùi d·ª± √°n (s·ªë nƒÉm)."},
        "annual_revenue": {"type": "NUMBER", "description": "Doanh thu h√†ng nƒÉm (t·ª∑ VNƒê ho·∫∑c VNƒê)."},
        "annual_cost": {"type": "NUMBER", "description": "Chi ph√≠ ho·∫°t ƒë·ªông h√†ng nƒÉm (t·ª∑ VNƒê ho·∫∑c VNƒê)."},
        "wacc": {"type": "NUMBER", "description": "Chi ph√≠ v·ªën b√¨nh qu√¢n gia quy·ªÅn (WACC) d∆∞·ªõi d·∫°ng th·∫≠p ph√¢n (v√≠ d·ª•: 0.13 cho 13%)."},
        "tax_rate": {"type": "NUMBER", "description": "Thu·∫ø su·∫•t thu·∫ø TNDN d∆∞·ªõi d·∫°ng th·∫≠p ph√¢n (v√≠ d·ª•: 0.2 cho 20%)."}
    },
    "required": ["initial_investment", "project_life", "annual_revenue", "annual_cost", "wacc", "tax_rate"]
}

# --- H√†m g·ªçi API Gemini v·ªõi Structured Output (Task 1) ---
def extract_financial_data(document_content: str, api_key: str) -> Dict[str, Any] | None:
    """S·ª≠ d·ª•ng Gemini ƒë·ªÉ tr√≠ch xu·∫•t d·ªØ li·ªáu t√†i ch√≠nh theo c·∫•u tr√∫c JSON."""
    try:
        client = genai.Client(api_key=api_key)
        model_name = 'gemini-2.5-flash'
        
        prompt = f"""
        B·∫°n l√† m·ªôt chuy√™n gia ph√¢n t√≠ch t√†i ch√≠nh. H√£y tr√≠ch xu·∫•t c√°c tham s·ªë t√†i ch√≠nh sau t·ª´ n·ªôi dung vƒÉn b·∫£n d∆∞·ªõi ƒë√¢y. 
        ƒê·∫£m b·∫£o c√°c gi√° tr·ªã ƒë∆∞·ª£c ƒë∆∞a ra d∆∞·ªõi d·∫°ng s·ªë (NUMBER ho·∫∑c INTEGER) v√† c√°c t·ª∑ l·ªá (WACC, Thu·∫ø) ph·∫£i l√† s·ªë th·∫≠p ph√¢n (v√≠ d·ª•: 0.13).
        
        N·ªôi dung vƒÉn b·∫£n:
        ---
        {document_content}
        ---
        """

        response = client.models.generate_content(
            model=model_name,
            contents=prompt,
            config=genai.types.GenerateContentConfig(
                response_mime_type="application/json",
                response_schema=FINANCIAL_SCHEMA,
            )
        )
        
        # X·ª≠ l√Ω response.text l√† chu·ªói JSON
        return json.loads(response.text)

    except APIError as e:
        st.error(f"L·ªói g·ªçi Gemini API: Vui l√≤ng ki·ªÉm tra Kh√≥a API ho·∫∑c gi·ªõi h·∫°n s·ª≠ d·ª•ng. Chi ti·∫øt l·ªói: {e}")
        return None
    except json.JSONDecodeError:
        st.error("L·ªói: AI kh√¥ng tr·∫£ v·ªÅ d·ªØ li·ªáu ƒë√∫ng ƒë·ªãnh d·∫°ng JSON. Vui l√≤ng th·ª≠ l·∫°i ho·∫∑c ch·ªânh s·ª≠a n·ªôi dung ƒë·∫ßu v√†o.")
        return None
    except Exception as e:
        st.error(f"ƒê√£ x·∫£y ra l·ªói kh√¥ng x√°c ƒë·ªãnh: {e}")
        return None

# --- H√†m t√≠nh to√°n D√≤ng ti·ªÅn v√† Ch·ªâ s·ªë (Task 2 & 3) ---
# S·ª≠ d·ª•ng Caching ƒë·ªÉ T·ªëi ∆∞u hi·ªáu su·∫•t
@st.cache_data
def calculate_project_metrics(params: Dict[str, Any]):
    """X√¢y d·ª±ng d√≤ng ti·ªÅn v√† t√≠nh to√°n NPV, IRR, PP, DPP."""
    
    # 1. Tr√≠ch xu·∫•t tham s·ªë
    I0 = params['initial_investment']
    N = params['project_life']
    R = params['annual_revenue']
    C = params['annual_cost']
    WACC = params['wacc']
    T = params['tax_rate']
    
    # 2. T√≠nh to√°n D√≤ng ti·ªÅn ho·∫°t ƒë·ªông h√†ng nƒÉm (ACF) - Gi·∫£ ƒë·ªãnh kh√¥ng c√≥ Kh·∫•u hao
    EBIT = R - C
    Tax = EBIT * T
    EAT = EBIT - Tax # L·ª£i nhu·∫≠n sau thu·∫ø
    ACF = EAT # D√≤ng ti·ªÅn thu·∫ßn h√†ng nƒÉm (r√≤ng)
    
    if ACF <= 0:
        st.error("L·ª£i nhu·∫≠n sau thu·∫ø (ACF) kh√¥ng d∆∞∆°ng. Kh√¥ng th·ªÉ th·ª±c hi·ªán t√≠nh to√°n hi·ªáu qu·∫£ d·ª± √°n.")
        return None, None
        
    # 3. X√¢y d·ª±ng B·∫£ng D√≤ng ti·ªÅn
    years = np.arange(0, N + 1)
    
    # D√≤ng ti·ªÅn kh√¥ng chi·∫øt kh·∫•u (Net Cash Flow - NCF)
    NCF = np.full(N + 1, ACF)
    NCF[0] = -I0 # V·ªën ƒë·∫ßu t∆∞ ban ƒë·∫ßu
    
    # H·ªá s·ªë chi·∫øt kh·∫•u
    discount_factors = 1 / (1 + WACC)**years
    
    # D√≤ng ti·ªÅn chi·∫øt kh·∫•u (Discounted Cash Flow - DCF)
    DCF = NCF * discount_factors
    
    # D√≤ng ti·ªÅn l≈©y k·∫ø (Cumulative)
    Cumulative_NCF = np.cumsum(NCF)
    Cumulative_DCF = np.cumsum(DCF)
    
    # T·∫°o DataFrame cho D√≤ng ti·ªÅn (Task 2)
    df_cf = pd.DataFrame({
        'NƒÉm': years,
        'D√≤ng ti·ªÅn thu·∫ßn (NCF)': NCF,
        'H·ªá s·ªë chi·∫øt kh·∫•u': discount_factors,
        'D√≤ng ti·ªÅn chi·∫øt kh·∫•u (DCF)': DCF,
        'NCF L≈©y k·∫ø': Cumulative_NCF,
        'DCF L≈©y k·∫ø': Cumulative_DCF,
    })
    
    # 4. T√≠nh to√°n Ch·ªâ s·ªë Hi·ªáu qu·∫£ (Task 3)
    
    # NPV (Net Present Value)
    NPV = np.sum(DCF)
    
    # IRR (Internal Rate of Return)
    try:
        IRR = np.irr(NCF)
    except Exception:
        IRR = np.nan # Kh√¥ng th·ªÉ t√≠nh IRR
        
    # PP (Payback Period - Th·ªùi gian ho√†n v·ªën kh√¥ng chi·∫øt kh·∫•u)
    PP = I0 / ACF
    
    # DPP (Discounted Payback Period - Th·ªùi gian ho√†n v·ªën c√≥ chi·∫øt kh·∫•u)
    # T√¨m nƒÉm ƒë·∫ßu ti√™n m√† DCF L≈©y k·∫ø > 0
    dpp_year = np.where(Cumulative_DCF >= 0)[0]
    if len(dpp_year) > 0:
        year_after = dpp_year[0]
        year_before = year_after - 1
        
        if year_before < 0:
            DPP = 0
        else:
            # C√¥ng th·ª©c n·ªôi suy: DPP = Y_{tr∆∞·ªõc} + |CFD_{tr∆∞·ªõc}| / CFD_{sau}
            CFD_before = Cumulative_DCF[year_before] # Gi√° tr·ªã √¢m
            CFD_after = DCF[year_after] # Gi√° tr·ªã d∆∞∆°ng
            DPP = year_before + (abs(CFD_before) / CFD_after)
    else:
        DPP = np.nan # Kh√¥ng ho√†n v·ªën trong v√≤ng ƒë·ªùi d·ª± √°n

    metrics = {
        'NPV': NPV,
        'IRR': IRR,
        'PP': PP,
        'DPP': DPP,
        'I0': I0,
        'N': N,
        'WACC': WACC,
    }
    
    return df_cf, metrics

# --- H√†m g·ªçi AI Ph√¢n t√≠ch Ch·ªâ s·ªë (Task 4) ---
def get_ai_analysis_metrics(metrics: Dict[str, Any], df_cf: pd.DataFrame, api_key: str):
    """G·ª≠i c√°c ch·ªâ s·ªë hi·ªáu qu·∫£ d·ª± √°n ƒë·∫øn Gemini API ƒë·ªÉ nh·∫≠n nh·∫≠n x√©t."""
    try:
        client = genai.Client(api_key=api_key)
        model_name = 'gemini-2.5-flash'
        
        # Chuy·ªÉn ƒë·ªïi d·ªØ li·ªáu sang ƒë·ªãnh d·∫°ng d·ªÖ ƒë·ªçc cho AI
        metrics_text = "\n".join([f"- {k}: {v:,.2f}" for k, v in metrics.items() if k not in ['I0', 'N', 'WACC']])
        
        prompt = f"""
        B·∫°n l√† m·ªôt chuy√™n gia ph√¢n t√≠ch ƒë·∫ßu t∆∞ v√† t√†i ch√≠nh. D·ª±a tr√™n c√°c ch·ªâ s·ªë hi·ªáu qu·∫£ d·ª± √°n sau, h√£y ƒë∆∞a ra m·ªôt ƒë√°nh gi√° chuy√™n s√¢u v√† kh√°ch quan (kho·∫£ng 3-4 ƒëo·∫°n) v·ªÅ t√≠nh kh·∫£ thi v√† r·ªßi ro c·ªßa d·ª± √°n. 
        ƒê√°nh gi√° t·∫≠p trung v√†o: 
        1. **NPV**: D·ª± √°n c√≥ t·∫°o ra gi√° tr·ªã th·∫∑ng d∆∞ kh√¥ng?
        2. **IRR** so v·ªõi **WACC ({metrics['WACC']*100:.2f}%)**: D·ª± √°n c√≥ h·∫•p d·∫´n h∆°n chi ph√≠ v·ªën kh√¥ng?
        3. **Th·ªùi gian ho√†n v·ªën (PP/DPP)** so v·ªõi **V√≤ng ƒë·ªùi d·ª± √°n ({metrics['N']} nƒÉm)**: M·ª©c ƒë·ªô r·ªßi ro thanh kho·∫£n.

        C√°c ch·ªâ s·ªë t√†i ch√≠nh c∆° b·∫£n:
        - V·ªën ƒë·∫ßu t∆∞ ban ƒë·∫ßu (I0): {metrics['I0']:,.0f}
        - WACC: {metrics['WACC']*100:.2f}%
        
        C√°c ch·ªâ s·ªë hi·ªáu qu·∫£ ƒë∆∞·ª£c t√≠nh to√°n (ƒê∆°n v·ªã VNƒê):
        {metrics_text}
        """

        response = client.models.generate_content(
            model=model_name,
            contents=prompt
        )
        return response.text

    except APIError as e:
        return f"L·ªói g·ªçi Gemini API: Vui l√≤ng ki·ªÉm tra Kh√≥a API. Chi ti·∫øt l·ªói: {e}"
    except Exception as e:
        return f"ƒê√£ x·∫£y ra l·ªói kh√¥ng x√°c ƒë·ªãnh: {e}"

# --- Giao di·ªán v√† Logic ch√≠nh c·ªßa ·ª®ng d·ª•ng ---

# 1. ƒê·∫ßu v√†o (M√¥ ph·ªèng n·ªôi dung file Word)
st.subheader("1. T·∫£i v√† Tr√≠ch xu·∫•t Tham s·ªë D·ª± √°n (S·ª≠ d·ª•ng AI)")
document_content = st.text_area(
    "Vui l√≤ng d√°n n·ªôi dung t√≥m t·∫Øt c·ªßa d·ª± √°n (m√¥ ph·ªèng n·ªôi dung file Word) v√†o ƒë√¢y:",
    """
    D·ª± √°n ƒë·∫ßu t∆∞ 1 d√¢y chuy·ªÅn s·∫£n xu·∫•t b√°nh m√¨ v·ªõi v·ªën ƒë·∫ßu t∆∞ 30.000.000.000 VNƒê. 
    D·ª± √°n c√≥ v√≤ng ƒë·ªùi trong 10 nƒÉm, b·∫Øt ƒë·∫ßu c√≥ d√≤ng ti·ªÅn t·ª´ cu·ªëi nƒÉm th·ª© 1 c·ªßa d·ª± √°n.
    M·ªói nƒÉm t·∫°o ra 3.500.000.000 VNƒê doanh thu v√† chi ph√≠ m·ªói nƒÉm l√† 2.000.000.000 VNƒê.
    Thu·∫ø su·∫•t 20%, WACC c·ªßa doanh nghi·ªáp l√† 13%.
    """,
    height=250
)

# N√∫t Tr√≠ch xu·∫•t
col_extract, _ = st.columns([1, 4])
if col_extract.button("1. Tr√≠ch xu·∫•t D·ªØ li·ªáu T√†i ch√≠nh (AI)", type="primary") or 'extracted_params' in st.session_state:
    api_key = st.secrets.get("GEMINI_API_KEY")
    
    if not api_key:
        st.error("L·ªói: Kh√¥ng t√¨m th·∫•y Kh√≥a API 'GEMINI_API_KEY'. Vui l√≤ng c·∫•u h√¨nh Kh√≥a API trong Streamlit Secrets.")
    elif document_content.strip():
        with st.spinner('ƒêang g·ª≠i vƒÉn b·∫£n v√† ch·ªù AI tr√≠ch xu·∫•t d·ªØ li·ªáu...'):
            extracted_params = extract_financial_data(document_content, api_key)
            st.session_state['extracted_params'] = extracted_params

if 'extracted_params' in st.session_state and st.session_state['extracted_params'] is not None:
    params = st.session_state['extracted_params']
    st.success("Tr√≠ch xu·∫•t d·ªØ li·ªáu th√†nh c√¥ng!")

    # Hi·ªÉn th·ªã tham s·ªë ƒë√£ tr√≠ch xu·∫•t
    st.markdown("#### Tham s·ªë ƒë√£ tr√≠ch xu·∫•t:")
    params_df = pd.DataFrame({
        'Ch·ªâ ti√™u': ['V·ªën ƒë·∫ßu t∆∞ ban ƒë·∫ßu (I0)', 'V√≤ng ƒë·ªùi d·ª± √°n (NƒÉm)', 'Doanh thu h√†ng nƒÉm', 'Chi ph√≠ h√†ng nƒÉm', 'WACC', 'Thu·∫ø su·∫•t'],
        'Gi√° tr·ªã': [
            f"{params['initial_investment']:,.0f} VNƒê",
            f"{params['project_life']} nƒÉm",
            f"{params['annual_revenue']:,.0f} VNƒê",
            f"{params['annual_cost']:,.0f} VNƒê",
            f"{params['wacc']*100:.2f}%",
            f"{params['tax_rate']*100:.0f}%"
        ]
    })
    st.dataframe(params_df, hide_index=True)
    st.divider()

    # 2 & 3. T√≠nh to√°n v√† hi·ªÉn th·ªã
    try:
        df_cf, metrics = calculate_project_metrics(params)
        
        if df_cf is not None and metrics is not None:
            st.session_state['df_cf'] = df_cf
            st.session_state['metrics'] = metrics
            
            # Hi·ªÉn th·ªã Ch·ªâ s·ªë Hi·ªáu qu·∫£ D·ª± √°n (Task 3)
            st.subheader("3. C√°c Ch·ªâ s·ªë ƒê√°nh gi√° Hi·ªáu qu·∫£ D·ª± √°n")
            
            col1, col2, col3, col4 = st.columns(4)
            
            col1.metric("NPV (Gi√° tr·ªã hi·ªán t·∫°i r√≤ng)", f"{metrics['NPV']:,.0f} VNƒê", delta="> 0 (T·∫°o ra gi√° tr·ªã th·∫∑ng d∆∞)" if metrics['NPV'] > 0 else "< 0 (Ph√° h·ªßy gi√° tr·ªã)")
            
            # Hi·ªÉn th·ªã IRR so v·ªõi WACC
            irr_delta = f"{metrics['IRR']*100:.2f}% so v·ªõi WACC ({metrics['WACC']*100:.2f}%)"
            irr_color = "inverse" if metrics['IRR'] < metrics['WACC'] else "normal"
            col2.metric("IRR (T·ª∑ su·∫•t sinh l·ª£i n·ªôi b·ªô)", f"{metrics['IRR']*100:.2f}%", delta=irr_delta, delta_color=irr_color)
            
            col3.metric("PP (Th·ªùi gian ho√†n v·ªën)", f"{metrics['PP']:.2f} nƒÉm")
            col4.metric("DPP (Ho√†n v·ªën c√≥ chi·∫øt kh·∫•u)", f"{metrics['DPP']:.2f} nƒÉm")

            st.divider()
            
            # Hi·ªÉn th·ªã B·∫£ng D√≤ng ti·ªÅn (Task 2)
            st.subheader("2. B·∫£ng D√≤ng ti·ªÅn c·ªßa D·ª± √°n")
            
            st.dataframe(
                df_cf.style.format({
                    'D√≤ng ti·ªÅn thu·∫ßn (NCF)': '{:,.0f} VNƒê',
                    'H·ªá s·ªë chi·∫øt kh·∫•u': '{:.4f}',
                    'D√≤ng ti·ªÅn chi·∫øt kh·∫•u (DCF)': '{:,.0f} VNƒê',
                    'NCF L≈©y k·∫ø': '{:,.0f} VNƒê',
                    'DCF L≈©y k·∫ø': '{:,.0f} VNƒê',
                }), 
                use_container_width=True,
                column_config={
                    "NƒÉm": st.column_config.NumberColumn("NƒÉm", format="%d", help="NƒÉm c·ªßa d·ª± √°n")
                }
            )
            st.divider()

            # 4. Ph√¢n t√≠ch AI
            st.subheader("4. Ph√¢n t√≠ch Chuy√™n s√¢u Ch·ªâ s·ªë Hi·ªáu qu·∫£ (AI)")
            if st.button("4. Y√™u c·∫ßu AI Ph√¢n t√≠ch Hi·ªáu qu·∫£ D·ª± √°n", key="analyze_metrics"):
                with st.spinner('ƒêang g·ª≠i c√°c ch·ªâ s·ªë v√† ch·ªù Gemini AI ph√¢n t√≠ch...'):
                    ai_analysis = get_ai_analysis_metrics(metrics, df_cf, api_key)
                    st.session_state['ai_analysis_result'] = ai_analysis
            
            if 'ai_analysis_result' in st.session_state:
                st.markdown("---")
                st.markdown("**K·∫øt qu·∫£ Ph√¢n t√≠ch t·ª´ Gemini AI:**")
                st.info(st.session_state['ai_analysis_result'])

    except Exception as e:
        st.error(f"L·ªói t√≠nh to√°n: {e}. Vui l√≤ng ki·ªÉm tra l·∫°i c√°c tham s·ªë ƒë·∫ßu v√†o.")

else:
    st.info("Vui l√≤ng d√°n n·ªôi dung d·ª± √°n v√† nh·∫•n n√∫t **'1. Tr√≠ch xu·∫•t D·ªØ li·ªáu T√†i ch√≠nh (AI)'** ƒë·ªÉ b·∫Øt ƒë·∫ßu.")
